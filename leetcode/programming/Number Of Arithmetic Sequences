//Brute Force
//Time Complexity-->O(n^2)
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        int diff=INT_MIN;
        int n=A.size();
        int count=0;
        for(int i=0;i<n;i++){
           for(int j=i+1;j<n;j++){
               if(j-i==1){
                   diff=A[j]-A[i];//calculating common difference
               }
               else if(j-i>=2){
                   if(A[j]-A[j-1]==diff)//checking for arithmetic slice
                       count+=1;
                   else
                       break;
               }
           } 
        }
        return count;
    }
};

// Time Complexity->O(n)
//Mathematical Approach
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        int n=A.size();
        int sum=0; //total count of slices
        int count=0;
        for(int i=2;i<n;i++){
            if(A[i]-A[i-1]==A[i-1]-A[i-2])
                count++;
            else{
                sum+=(count*(count+1))/2;
                count=0;
            }
        }
        sum+=(count*(count+1))/2;
        return sum;
    }
};
