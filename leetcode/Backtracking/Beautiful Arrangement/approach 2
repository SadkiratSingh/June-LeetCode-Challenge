// idea is reverse of previous approach
// in this we consider that every position has n number of possibilites where is n is the input with a little twist.
// twist is that permutations are without any repetitions therefore a visited array is needed.

class Solution {
public:
    void countArrangementUtil(int n,int pos,vector<int>& visited,int& count){
        if(pos>n){
            count+=1;
            return;
        }
        for(int i=1;i<=n;i++){
            if( (visited[i-1]==0) && (i%pos==0 || pos%i==0) ){
                visited[i-1]=1;
                countArrangementUtil(n,pos+1,visited,count);
                visited[i-1]=0;
            }
        }
    }
    int countArrangement(int n) {
        vector<int>visited(n); //initialized with zero
        int pos=1;
        int count=0;
        countArrangementUtil(n,pos,visited,count);
        return count;
    }
};
