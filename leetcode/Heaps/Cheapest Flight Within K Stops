typedef pair<int,int> pi;

class Solution {
public:
    void DFS(map<int,vector<pair<int,int>>>& um,priority_queue<pi,vector<pi>,greater<pi>>& costs,int src,int dst,int K,int e,int c){
        if(e-1>K)
            return; //if K is reached on reaching a particular station
        if(src==dst)
            costs.push({c,e-1});
        for(int i=0;i<um[src].size();i++){
            int next=um[src][i].first; //next stop
            int n_c=um[src][i].second; //cost to next stop;
            DFS(um,costs,next,dst,K,e+1,c+n_c); //DFS
        }
    }
    
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {
        map<int,vector<pi>>um; //all flights
        priority_queue<pi,vector<pi>,greater<pi>>costs; //maintain costs
        for(auto x:flights)
            um[x[0]].push_back({x[1],x[2]});
        
        DFS(um,costs,src,dst,K,0,0);
        if(!costs.empty())
            return (costs.top()).first;
        else
            return -1;
    }
};

//time limit exceeded;
