class Solution {
public:
    void DFS(map<int,vector<pair<int,int>>>& om,map<int,int>& dist,int node,int tfs,int source,map<int,int>& visited){
        if(visited[node]==0){
            visited[node]=1;
            for(int i=0;i<om[node].size();i++){
                int o_tfs=tfs;
                int key=om[node][i].first;// next node to be processed.
                tfs+=om[node][i].second;// incrementing path cost.
                if(tfs<dist[key])
                    dist[key]=tfs;
                DFS(om,dist,key,tfs,source,visited);
                tfs=o_tfs; 
            }
            visited[node]=0;
        }
    }
    
    int findmax(map<int,int>& dist){
        int max=INT_MIN;
        for(auto x:dist){
            if(x.second>max)
                max=x.second;
        }
        if(max==INT_MAX)
            return -1;
        else
            return max;
    }
    
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        map<int,vector<pair<int,int>>>om;
        map<int,int>dist; // processes the main intuition behind this problem
        map<int,int>visited;
        
        for(int i=0;i<times.size();i++)
            om[times[i][0]].push_back(make_pair(times[i][1],times[i][2])); //represent graph
        for(int i=0;i<n;i++){
            dist.insert(make_pair(i+1,INT_MAX));// construct timemap
            visited.insert(make_pair(i+1,0));
        }
        
        int source=k;
        dist[source]=0; //processing the source node;
        int time_from_src=0;
        DFS(om,dist,source,time_from_src,source,visited);
        return findmax(dist);
    }
};

//Time limit exceeded//
