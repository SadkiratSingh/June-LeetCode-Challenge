class Solution {
public:
    void DFS(map<int,vector<pair<int,int>>>& om,map<int,int>& dist,int node,int tfs){
        for(auto y:om[node]){
            if(tfs+y.second<dist[y.first]){
                dist[y.first]=tfs+y.second;
                DFS(om,dist,y.first,tfs+y.second);
            }
        }
    }
    
    int findmax(map<int,int>& dist){
        int max=INT_MIN;
        for(auto x:dist){
            if(x.second>max)
                max=x.second;
        }
        if(max==INT_MAX)
            return -1;
        else
            return max;
    }
    
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        map<int,vector<pair<int,int>>>om;
        map<int,int>dist; // processes the main intuition behind this problem
        
        for(int i=0;i<times.size();i++)
            om[times[i][0]].push_back(make_pair(times[i][1],times[i][2])); //represent graph
        for(int i=0;i<n;i++){
            dist.insert(make_pair(i+1,INT_MAX));// construct timemap
        }
        
        dist[k]=0; //processing the source node;
        DFS(om,dist,k,0);
        return findmax(dist);
    }
};

//time limit exceeded//
