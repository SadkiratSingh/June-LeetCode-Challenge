class Solution {
public:
    void DFS(map<int,vector<pair<int,int>>>& om,map<int,int>& dist,int node,int tfs){
        if(tfs<dist[node])
            dist[node]=tfs; // shortest path to each node from source.
        else        // this means we can already reach this node in less amount of time .
            return; // hence no need to be processed 
        for(auto y:om[node])
            DFS(om,dist,y.second,tfs+y.first);
    }
    
    int findmax(map<int,int>& dist){
        int max=INT_MIN;
        for(auto x:dist){
            if(x.second>max)
                max=x.second;
        }
        if(max==INT_MAX)
            return -1;
        else
            return max;
    }
    
    
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        map<int,vector<pair<int,int>>>om;
        map<int,int>dist; // processes the main intuition behind this problem
        
        for(int i=0;i<times.size();i++)
            om[times[i][0]].push_back(make_pair(times[i][2],times[i][1])); //represent graph
        
        for(int i=0;i<n;i++){
            dist.insert(make_pair(i+1,INT_MAX));// construct timemap
            sort(om[i+1].begin(),om[i+1].end());
        }
        
        DFS(om,dist,k,0);
        return findmax(dist);
    }
};
