class Solution {
public:
    int checksides(vector<vector<int>>& grid,int i,int j,int r,int c){
        int count=0;
        if(i-1<0 || grid[i-1][j]==0)
            count+=1;
        if(j-1<0 || grid[i][j-1]==0)
            count+=1;
        if(i+1>=r || grid[i+1][j]==0)
            count+=1;
        if(j+1>=c || grid[i][j+1]==0)
            count+=1;
        return count;
    }
    void islandperimeterUtil(vector<vector<int>>& grid,int& perimeter,int i,int j,int r,int c,int** visited){
        if((i>=0 && i<r) && (j>=0 && j<c) && visited[i][j]==0){
            visited[i][j]=1;
            if(grid[i][j]==1)
                perimeter+=checksides(grid,i,j,r,c)*1;
            islandperimeterUtil(grid,perimeter,i-1,j,r,c,visited);
            islandperimeterUtil(grid,perimeter,i,j-1,r,c,visited);
            islandperimeterUtil(grid,perimeter,i+1,j,r,c,visited);
            islandperimeterUtil(grid,perimeter,i,j+1,r,c,visited);
        }
    }
    int islandPerimeter(vector<vector<int>>& grid) {
        int perimeter=0;
        int i=0;
        int j=0;
        int rows=grid.size();
        int columns=grid[0].size();
        //visited array//
        int** visited=new int*[rows];
        for(int i=0;i<rows;i++)
            visited[i]=new int[columns];
        for(int i=0;i<rows;i++){
            for(int j=0;j<columns;j++)
                visited[i][j]=0;
        }
        //visited array//
        islandperimeterUtil(grid,perimeter,i,j,rows,columns,visited);
        return perimeter;
    }
};
