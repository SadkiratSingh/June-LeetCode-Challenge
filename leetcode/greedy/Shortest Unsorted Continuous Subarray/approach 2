The idea behind this method is that the correct position of the minimum element in the unsorted subarray helps to determine the required left boundary. 
Similarly, the correct position of the maximum element in the unsorted subarray helps to determine the required right boundary.


class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n=nums.size();
        int flag=0;
        int mini=INT_MAX;
        int maxi=INT_MIN;
        int l,r;
        //move from left to right
        for(int i=0;i<n-1;i++){
            if(nums[i+1]<nums[i])
                flag=1;
            if(flag)
                mini=min(mini,nums[i+1]);
        }
        flag=0;
        //move from right to left
        for(int i=n-2;i>=0;i--){
            if(nums[i]>nums[i+1])
                flag=1;
            if(flag)
                maxi=max(maxi,nums[i]);
        }
        for(l=0;l<n;l++){
            if(nums[l]>mini)
                break;
        }
        for(r=n-1;r>=0;r--){
            if(nums[r]<maxi)
                break;
        }
        if(r-l<0)
            return 0;
        else
            return r-l+1;
    }
};
