class Solution {
public:
    int twoCitySchedCost(vector<vector<int>>& costs) {
        map<int,vector<int>>diff;
        int each_city_count=(costs.size())/2;
        int city_a_count=0;
        int city_b_count=0;
        int actual_min_cost=0;
        int min_cost_possible=0;
        for(int i=0;i<costs.size();i++){
            if(costs[i][0]<=costs[i][1]){
                city_a_count+=1;
                min_cost_possible+=costs[i][0];
            }
            else if(costs[i][0]>costs[i][1]){
                city_b_count+=1;
                min_cost_possible+=costs[i][1];
            }
        }
        if(city_b_count==each_city_count && city_a_count==each_city_count){
            actual_min_cost=min_cost_possible;
            return actual_min_cost;
        }
        else if(city_b_count>each_city_count){
            
            for(int i=0;i<costs.size();i++){
                if(costs[i][0]>costs[i][1]){
                    int difference=abs(costs[i][0]-costs[i][1]);
                    diff[difference].push_back(i);
                }
            }
            
            for(auto x:diff){
                for(int i=0;i<x.second.size();i++){
                    min_cost_possible+=x.first;
                    city_b_count-=1;
                    city_a_count+=1;
                    if(city_b_count==each_city_count && city_a_count==each_city_count){
                        actual_min_cost=min_cost_possible;
                        return actual_min_cost;
                    }
                }
            }
        }
        else if(city_a_count>each_city_count){
            
            for(int i=0;i<costs.size();i++){
                if(costs[i][0]<=costs[i][1]){
                    int difference=abs(costs[i][0]-costs[i][1]);
                    diff[difference].push_back(i);
                }
            }
            
            for(auto x:diff){
                for(int i=0;i<x.second.size();i++){
                    min_cost_possible+=x.first;
                    city_b_count+=1;
                    city_a_count-=1;
                    if(city_b_count==each_city_count && city_a_count==each_city_count){
                        actual_min_cost=min_cost_possible;
                        return actual_min_cost;
                    }
                }
            }
        }
        return 0;
    }
};
