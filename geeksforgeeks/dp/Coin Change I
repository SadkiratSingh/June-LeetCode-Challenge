// no of ways 
//coin array need not be sorted
class Solution
{
  public:
    long long int count( int S[], int m, int n )
    {
       //code here.
       long long int t[m+1][n+1];
       for(int i=0;i<m+1;i++){
           for(int j=0;j<n+1;j++){
               if(j==0)
                  t[i][j]=1;
               else if(i==0)
                  t[i][j]=0;
               else{
                   if(S[i-1]<=j)
                       t[i][j]=t[i][j-S[i-1]] + t[i-1][j];
                   else
                       t[i][j]=t[i-1][j];
               }
           }
       }
       return t[m][n];
    }
};
////////////////////////////////////////////////
//we observe in below recurson way of solving the problem that we dont change the state of the coin array when we include a coin of a particular denomination.
//Due to above fact this problem can be converted from 2-dimensional dp to linear dp.
#include <iostream>
using namespace std;

int coinchangeways(int* arr,int n,int m){
    if(m==0)
       return 1;
    if(n==0)
       return 0;
    if(arr[n-1]<=m)
       return coinchangeways(arr,n,m-arr[n-1])+coinchangeways(arr,n-1,m);
    else
       return coinchangeways(arr,n-1,m);
}

int main() {
	// your code goes here
	int arr[3]={1,2,3};
	int n=3;
	int m=4;
	cout<<coinchangeways(arr,n,m);
	return 0;
}
/////////////////////////////////////////////////
//using linear dp
class Solution
{
  public:
    long long int count( int S[], int m, int n )
    {
       //code here.
      //initializing array with 0, assuming we dont have any denomination
      //initially.
      //initialzation process of recursion is emulated.
      long long int change[n+1];
      fill(change,change+n+1,0);
      change[0]=1;
      //we will use nested for loop as 2 variables are changing
      //in recursive way.
      for(int i=0;i<m;i++){
          for(int j=0;j<=n;j++){
              if(S[i]<=j)
                change[j]=change[j]+change[j-S[i]];
          }
      }
      return change[n];
    }
};
