// no of ways 
class Solution
{
  public:
    long long int count( int S[], int m, int n )
    {
       //code here.
       long long int t[m+1][n+1];
       for(int i=0;i<m+1;i++){
           for(int j=0;j<n+1;j++){
               if(j==0)
                  t[i][j]=1;
               else if(i==0)
                  t[i][j]=0;
               else{
                   if(S[i-1]<=j)
                       t[i][j]=t[i][j-S[i-1]] + t[i-1][j];
                   else
                       t[i][j]=t[i-1][j];
               }
           }
       }
       return t[m][n];
    }
};
////////////////////////////////////////////////
//using recursion so that linear dp is used
#include <iostream>
using namespace std;

int count( int S[], int m, int n )
    {
       //code here.
       if(n==0)
         return 1;
       int ways=0;
       for(int i=m;i>0;i--){
           if(S[i-1]<=n)
              ways+=count(S,i,n-S[i-1]);
       }
       return ways;
    }

int main() {
	// your code goes here
	int arr[3]={1,2,3};
	int m=3;
	int n=3;
	cout<<count(arr,m,n);
	return 0;
}
/////////////////////////////////////////////////
