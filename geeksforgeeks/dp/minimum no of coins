#include <iostream>
#include <bits/stdc++.h>
using namespace std;

int mincoinchange(int* arr,int n,int m){
    if(m==0)
      return 0;
    if(n==0)
      return INT_MIN-1;
    if(arr[n-1]<=m)
       return min(1+mincoinchange(arr,n,m-arr[n-1]),mincoinchange(arr,n-1,m));
    else
       return mincoinchange(arr,n-1,m);
}

int main() {
	// your code goes here
	int arr[3]={1,2,3};
	int n=3;
	int m=4;
	cout<<mincoinchange(arr,n,m);
	return 0;
}
/////////////////////////////////////////////////////////
//recursive approach helps me building bottom up approach

class Solution{

	public:
	int minCoins(int coins[], int M, int V) 
	{ 
	    // Your code goes here
	    int dp[V+1];
            fill(dp,dp+V+1,INT_MAX-1);
	    dp[0]=0;
	    for(int i=0;i<M;i++){
	        for(int j=0;j<=V;j++){
	            if(coins[i]<=j)
	              dp[j]=min(dp[j],1+dp[j-coins[i]]);
	        }
	    }
	    if(dp[V]==INT_MAX-1)
	      return -1;
	    else
	      return dp[V];
	} 
	  
};
