int height(Node* root){
    if(root)
        return 1+max(height(root->left),height(root->right));
    else
        return 0;
}

void levelOrder(Node* root,int level,bool& notHasSib,vector<int>&v){
    if(root){
        if(level==0){
            if(root->right && !root->left){
                v.push_back(root->right->data);
                notHasSib=true;
            }
            else if(root->left && !root->right){
                v.push_back(root->left->data);
                notHasSib=true;
            }
        }
        levelOrder(root->left,level-1,notHasSib,v);
        levelOrder(root->right,level-1,notHasSib,v);
    }
}

void printSibling(Node* node)
{
   // Your code here
   int h=height(node);
   int level=0;
   bool notHasSib=false;
   vector<int>forSort;
   while(level<h){
       levelOrder(node,level,notHasSib,forSort);
       level++;
   }
   if(!notHasSib){
       cout<<-1;
   }
   else{
       sort(forSort.begin(),forSort.end());
       for(int i=0;i<forSort.size();i++)
           cout<<forSort[i]<<" ";
   }
}
