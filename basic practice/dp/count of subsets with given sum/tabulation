#include <iostream>
#include <vector>
using namespace std;

/*
These problems give me an intuition of IBH because output is formed in bottom up manner unlike backtracking 
where output is formed in top down manner i.e. we get our result at the leaf node(atleast in the questions
that I have done).However, like backtracking DP involves choices+decisions idea.Hence DP combines both IBH
and backtracking intuition.
*/

int findSubsetNo(vector<int>& array,int n,int S){
    int t[n+1][S+1];
    for(int i=0;i<n+1;i++){
        for(int j=0;j<S+1;j++){
            if(j==0){
                t[i][j]=1;
            }
            else if(i==0){
                t[i][j]=0;
            }
            else{
                if(array[i-1]<=j){
                    t[i][j]=t[i-1][j-array[i-1]]+t[i-1][j];
                }
                else{
                    t[i][j]=t[i-1][j];
                }
            }
        }
    }
    return t[n][S];
}

int main() {
	// your code goes here
	int n;
	cin>>n;
	vector<int>array(n);
	for(int i=0;i<n;i++){
	    int temp;
	    cin>>temp;
	    array[i]=temp;
	}
	int S;
	cin>>S;
	cout<<findSubsetNo(array,n,S);
	return 0;
}
