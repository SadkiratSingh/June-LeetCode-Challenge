//unbounded knapsack

#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int rodCutting(vector<int>& prices,int size){
    int n=prices.size();
    int t[n+1][size+1];
    for(int i=0;i<n+1;i++){
        for(int j=0;j<size+1;j++){
            if(i==0 || j==0){
                t[i][j]=0;
            }
            else{
                if(i<=j){
                    t[i][j]=max(prices[i-1]+t[i][j-i],t[i-1][j]);
                }
                else{
                    t[i][j]=t[i-1][j];
                }
            }
        }
    }
    return t[n][size];
}

int main()
 {
	//code
	int T;
	cin>>T;
	while(T>0){
	    int size;
	    cin>>size;
	    vector<int>prices(size);
	    for(int i=0;i<size;i++){
	        int p;
	        cin>>p;
	        prices[i]=p;
	    }
	    cout<<rodCutting(prices,size)<<endl;
	    T--;
	}
	return 0;
}
